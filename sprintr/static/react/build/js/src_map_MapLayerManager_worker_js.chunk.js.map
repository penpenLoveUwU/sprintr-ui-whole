{"version":3,"file":"js/src_map_MapLayerManager_worker_js.chunk.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA","sources":["C:/Users/11358/Downloads/valetudo-map/mapping/src/map/MapLayerManagerUtils.js","C:/Users/11358/Downloads/valetudo-map/mapping/src/map/utils/colors/ColorUtils.js","C:/Users/11358/Downloads/valetudo-map/mapping/src/map/utils/colors/FourColorTheoremSolver.js","C:/Users/11358/Downloads/valetudo-map/mapping/src/map/utils/colors/MapAreaGraph.js","C:/Users/11358/Downloads/valetudo-map/mapping/src/map/utils/colors/MapAreaVertex.js","C:/Users/11358/Downloads/valetudo-map/mapping/webpack/bootstrap","C:/Users/11358/Downloads/valetudo-map/mapping/webpack/runtime/define property getters","C:/Users/11358/Downloads/valetudo-map/mapping/webpack/runtime/hasOwnProperty shorthand","C:/Users/11358/Downloads/valetudo-map/mapping/webpack/runtime/make namespace object","C:/Users/11358/Downloads/valetudo-map/mapping/src/map/MapLayerManager.worker.js"],"sourcesContent":["import { FourColorTheoremSolver } from \"./utils/colors/FourColorTheoremSolver\";\r\nexport function PROCESS_LAYERS(layers, pixelSize, colors, backgroundColors, selectedSegmentIds) {\r\n    const dimensions = CALCULATE_REQUIRED_DIMENSIONS(layers);\r\n    const width = dimensions.x.sum;\r\n    const height = dimensions.y.sum;\r\n    const pixelData = new Uint8ClampedArray(width * height * 4);\r\n    const segmentLookupData = new Uint8ClampedArray(width * height);\r\n    const segmentLookupIdMapping = new Map(); //Because segment IDs are arbitrary strings, we need this mapping to an int for the lookup data\r\n    const colorFinder = new FourColorTheoremSolver(layers, pixelSize);\r\n    const hasSelectedSegments = selectedSegmentIds.length === 0;\r\n    [...layers].sort((a, b) => {\r\n        return TYPE_SORT_MAPPING[a.type] - TYPE_SORT_MAPPING[b.type];\r\n    }).forEach(layer => {\r\n        let color;\r\n        switch (layer.type) {\r\n            case \"floor\":\r\n                if (hasSelectedSegments) {\r\n                    color = colors.floor;\r\n                }\r\n                else {\r\n                    color = backgroundColors.floor;\r\n                }\r\n                break;\r\n            case \"wall\":\r\n                if (hasSelectedSegments) {\r\n                    color = colors.wall;\r\n                }\r\n                else {\r\n                    color = backgroundColors.wall;\r\n                }\r\n                break;\r\n            case \"segment\": {\r\n                if (hasSelectedSegments || selectedSegmentIds.includes(layer.metaData.segmentId ?? \"\")) {\r\n                    color = colors.segments[colorFinder.getColor((layer.metaData.segmentId ?? \"\"))];\r\n                }\r\n                else {\r\n                    color = backgroundColors.segments[colorFinder.getColor((layer.metaData.segmentId ?? \"\"))];\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (!color) {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`Missing color for ${layer.type} with segment id '${layer.metaData.segmentId}'.`);\r\n            color = { r: 128, g: 128, b: 128 };\r\n        }\r\n        let segmentLookupId = 0;\r\n        if (layer.metaData.segmentId) {\r\n            segmentLookupId = segmentLookupIdMapping.size + 1;\r\n            segmentLookupIdMapping.set(segmentLookupId, layer.metaData.segmentId);\r\n        }\r\n        for (let i = 0; i < layer.pixels.length; i = i + 2) {\r\n            const offset = ((layer.pixels[i] - dimensions.x.min) +\r\n                ((layer.pixels[i + 1] - dimensions.y.min) * width));\r\n            const imgDataOffset = offset * 4;\r\n            pixelData[imgDataOffset] = color.r;\r\n            pixelData[imgDataOffset + 1] = color.g;\r\n            pixelData[imgDataOffset + 2] = color.b;\r\n            pixelData[imgDataOffset + 3] = 255;\r\n            segmentLookupData[offset] = segmentLookupId;\r\n        }\r\n    });\r\n    return {\r\n        pixelData: pixelData,\r\n        width: dimensions.x.sum,\r\n        height: dimensions.y.sum,\r\n        left: dimensions.x.min,\r\n        top: dimensions.y.min,\r\n        segmentLookupData: segmentLookupData,\r\n        segmentLookupIdMapping: Object.fromEntries(segmentLookupIdMapping)\r\n    };\r\n}\r\nfunction CALCULATE_REQUIRED_DIMENSIONS(layers) {\r\n    const dimensions = {\r\n        x: {\r\n            min: Infinity,\r\n            max: -Infinity,\r\n            sum: 0,\r\n        },\r\n        y: {\r\n            min: Infinity,\r\n            max: -Infinity,\r\n            sum: 0,\r\n        },\r\n    };\r\n    layers.forEach(layer => {\r\n        dimensions.x.min = layer.dimensions.x.min < dimensions.x.min ? layer.dimensions.x.min : dimensions.x.min;\r\n        dimensions.x.max = layer.dimensions.x.max > dimensions.x.max ? layer.dimensions.x.max : dimensions.x.max;\r\n        dimensions.y.min = layer.dimensions.y.min < dimensions.y.min ? layer.dimensions.y.min : dimensions.y.min;\r\n        dimensions.y.max = layer.dimensions.y.max > dimensions.y.max ? layer.dimensions.y.max : dimensions.y.max;\r\n    });\r\n    dimensions.x.sum = (dimensions.x.max - dimensions.x.min) + 1;\r\n    dimensions.y.sum = (dimensions.y.max - dimensions.y.min) + 1;\r\n    dimensions.x.sum = isFinite(dimensions.x.sum) ? dimensions.x.sum : 0;\r\n    dimensions.y.sum = isFinite(dimensions.y.sum) ? dimensions.y.sum : 0;\r\n    return dimensions;\r\n}\r\n// This is important because it determines the draw order\r\nconst TYPE_SORT_MAPPING = {\r\n    \"floor\": 14,\r\n    \"segment\": 15,\r\n    \"wall\": 16\r\n};\r\n","export function create2DArray(xLength, yLength) {\r\n    return [...new Array(xLength)].map(elem => {\r\n        return [...new Array(yLength)];\r\n    });\r\n}\r\n","import { MapAreaVertex } from \"./MapAreaVertex\";\r\nimport { MapAreaGraph } from \"./MapAreaGraph\";\r\nimport { create2DArray } from \"./ColorUtils\";\r\nexport class FourColorTheoremSolver {\r\n    constructor(layers, pixelSize) {\r\n        /**\r\n         * @param {number} resolution - Minimal resolution of the map scanner in pixels. Any number higher than one will lead to this many pixels being skipped when finding segment boundaries.\r\n         * For example: If the robot measures 30cm in length/width, this should be set to 6, as no room can be smaller than 6 pixels. This of course implies that a pixel represents 5cm in the real world.\r\n         */\r\n        const resolution = Math.floor(30 / pixelSize);\r\n        this.stepFunction = function (c) {\r\n            return c + resolution;\r\n        };\r\n        const preparedLayers = this.preprocessLayers(layers);\r\n        if (preparedLayers !== undefined) {\r\n            const mapData = this.createPixelToSegmentMapping(preparedLayers);\r\n            this.areaGraph = this.buildGraph(mapData);\r\n            this.areaGraph.colorAllVertices();\r\n        }\r\n    }\r\n    /*\r\n     * @param {string} segmentId - ID of the segment you want to get the color for.\r\n     * The segment ID is extracted from the layer meta data in the first contructor parameter of this class.\r\n     * @returns {number} The segment color, represented as an integer. Starts at 0 and goes up the minimal number of colors required to color the map without collisions.\r\n     */\r\n    getColor(segmentId) {\r\n        if (this.areaGraph === undefined) {\r\n            // Layer preprocessing seems to have failed. Just return a default value for any input.\r\n            return 0;\r\n        }\r\n        const segmentFromGraph = this.areaGraph.getById(segmentId);\r\n        if (segmentFromGraph && segmentFromGraph.color !== undefined) {\r\n            return segmentFromGraph.color;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    preprocessLayers(layers) {\r\n        const internalSegments = [];\r\n        const boundaries = {\r\n            minX: Infinity,\r\n            maxX: -Infinity,\r\n            minY: Infinity,\r\n            maxY: -Infinity,\r\n        };\r\n        const filteredLayers = layers.filter((layer) => {\r\n            return layer.type === \"segment\";\r\n        });\r\n        if (filteredLayers.length <= 0) {\r\n            return undefined;\r\n        }\r\n        filteredLayers.forEach((layer) => {\r\n            const allPixels = [];\r\n            for (let index = 0; index < layer.pixels.length - 1; index += 2) {\r\n                const p = {\r\n                    x: layer.pixels[index],\r\n                    y: layer.pixels[index + 1],\r\n                };\r\n                FourColorTheoremSolver.setBoundaries(boundaries, p);\r\n                allPixels.push(p);\r\n            }\r\n            if (layer.metaData.segmentId !== undefined) {\r\n                internalSegments.push({\r\n                    segmentId: layer.metaData.segmentId,\r\n                    name: layer.metaData.name,\r\n                    pixels: allPixels,\r\n                });\r\n            }\r\n        });\r\n        return {\r\n            boundaries: boundaries,\r\n            segments: internalSegments,\r\n        };\r\n    }\r\n    static setBoundaries(res, pixel) {\r\n        if (pixel.x < res.minX) {\r\n            res.minX = pixel.x;\r\n        }\r\n        if (pixel.y < res.minY) {\r\n            res.minY = pixel.y;\r\n        }\r\n        if (pixel.x > res.maxX) {\r\n            res.maxX = pixel.x;\r\n        }\r\n        if (pixel.y > res.maxY) {\r\n            res.maxY = pixel.y;\r\n        }\r\n    }\r\n    createPixelToSegmentMapping(preparedLayers) {\r\n        const pixelData = create2DArray(preparedLayers.boundaries.maxX + 1, preparedLayers.boundaries.maxY + 1);\r\n        const segmentIds = [];\r\n        preparedLayers.segments.forEach((seg) => {\r\n            segmentIds.push(seg.segmentId);\r\n            seg.pixels.forEach((p) => {\r\n                pixelData[p.x][p.y] = seg.segmentId;\r\n            });\r\n        });\r\n        return {\r\n            map: pixelData,\r\n            segmentIds: segmentIds,\r\n            boundaries: preparedLayers.boundaries,\r\n        };\r\n    }\r\n    buildGraph(mapData) {\r\n        const vertices = mapData.segmentIds.map((i) => {\r\n            return new MapAreaVertex(i);\r\n        });\r\n        const graph = new MapAreaGraph(vertices);\r\n        this.traverseMap(mapData.boundaries, mapData.map, (x, y, currentSegmentId, pixelData) => {\r\n            const newSegmentId = pixelData[x][y];\r\n            graph.connectVertices(currentSegmentId, newSegmentId);\r\n            return newSegmentId !== undefined ? newSegmentId : currentSegmentId;\r\n        });\r\n        return graph;\r\n    }\r\n    traverseMap(boundaries, pixelData, func) {\r\n        // row-first traversal\r\n        for (let y = boundaries.minY; y <= boundaries.maxY; y = this.stepFunction(y)) {\r\n            let rowFirstSegmentId = undefined;\r\n            for (let x = boundaries.minX; x <= boundaries.maxX; x = this.stepFunction(x)) {\r\n                rowFirstSegmentId = func(x, y, rowFirstSegmentId, pixelData);\r\n            }\r\n        }\r\n        // column-first traversal\r\n        for (let x = boundaries.minX; x <= boundaries.maxX; x = this.stepFunction(x)) {\r\n            let colFirstSegmentId = undefined;\r\n            for (let y = boundaries.minY; y <= boundaries.maxY; y = this.stepFunction(y)) {\r\n                colFirstSegmentId = func(x, y, colFirstSegmentId, pixelData);\r\n            }\r\n        }\r\n    }\r\n}\r\n","export class MapAreaGraph {\r\n    constructor(vertices) {\r\n        this.vertices = vertices;\r\n        this.vertexLookup = new Map();\r\n        this.vertices.forEach((v) => {\r\n            this.vertexLookup.set(v.id, v);\r\n        });\r\n    }\r\n    connectVertices(id1, id2) {\r\n        if (id1 !== undefined && id2 !== undefined && id1 !== id2) {\r\n            if (this.vertexLookup.has(id1)) {\r\n                this.vertexLookup.get(id1).appendVertex(id2);\r\n            }\r\n            if (this.vertexLookup.has(id2)) {\r\n                this.vertexLookup.get(id2).appendVertex(id1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Color the graphs vertices using a greedy algorithm. Any vertices that have already been assigned a color will not be changed.\r\n     * Color assignment will start with the vertex that is connected with the highest number of edges. In most cases, this will\r\n     * naturally lead to a distribution where only four colors are required for the whole graph. This is relevant for maps with a high\r\n     * number of segments, as the naive, greedy algorithm tends to require a fifth color when starting coloring in a segment far from the map's center.\r\n     *\r\n     */\r\n    colorAllVertices() {\r\n        this.vertices.sort((l, r) => {\r\n            return r.adjacentVertexIds.size - l.adjacentVertexIds.size;\r\n        });\r\n        this.vertices.forEach((v) => {\r\n            if (v.adjacentVertexIds.size <= 0) {\r\n                v.color = 0;\r\n            }\r\n            else {\r\n                const adjacentVertices = this.getAdjacentVertices(v);\r\n                const existingColors = adjacentVertices\r\n                    .filter((vert) => {\r\n                    return vert.color !== undefined;\r\n                })\r\n                    .map((vert) => {\r\n                    return vert.color;\r\n                });\r\n                v.color = this.lowestColor(existingColors);\r\n            }\r\n        });\r\n    }\r\n    getAdjacentVertices(vertex) {\r\n        return Array.from(vertex.adjacentVertexIds).map((id) => {\r\n            return this.getById(id);\r\n        }).filter(adjacentVertex => {\r\n            return adjacentVertex !== undefined;\r\n        });\r\n    }\r\n    getById(id) {\r\n        return this.vertices.find((v) => {\r\n            return v.id === id;\r\n        });\r\n    }\r\n    lowestColor(colors) {\r\n        if (colors.length <= 0) {\r\n            return 0;\r\n        }\r\n        for (let index = 0; index < colors.length + 1; index++) {\r\n            if (!colors.includes(index)) {\r\n                return index;\r\n            }\r\n        }\r\n    }\r\n}\r\n","export class MapAreaVertex {\r\n    constructor(id) {\r\n        this.id = id;\r\n        this.adjacentVertexIds = new Set();\r\n        this.color = undefined;\r\n    }\r\n    appendVertex(vertexId) {\r\n        if (vertexId !== undefined) {\r\n            this.adjacentVertexIds.add(vertexId);\r\n        }\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { PROCESS_LAYERS } from \"./MapLayerManagerUtils\";\r\nlet cachedLayers = [];\r\nwindow.self.postMessage({\r\n    ready: true\r\n});\r\nwindow.self.addEventListener(\"message\", (evt) => {\r\n    //According to SonarJS S2819, this might be problematic\r\n    //I honestly have no idea if this check is actually needed in a webworker context, but I'll do as the tool says.\r\n    // if (evt.origin !== \"\") {\r\n    //     // eslint-disable-next-line no-console\r\n    //     console.warn(`Received event with unexpected origin \"${evt.origin}\"`);\r\n    //     return;\r\n    // }\r\n    if (evt.data.mapLayers) {\r\n        cachedLayers = evt.data.mapLayers;\r\n    }\r\n    const rendered = PROCESS_LAYERS(cachedLayers, evt.data.pixelSize, evt.data.colors, evt.data.backgroundColors, evt.data.selectedSegmentIds);\r\n    window.self.postMessage({\r\n        pixelData: rendered.pixelData.buffer,\r\n        width: rendered.width,\r\n        height: rendered.height,\r\n        left: rendered.left,\r\n        top: rendered.top,\r\n        segmentLookupData: rendered.segmentLookupData.buffer,\r\n        segmentLookupIdMapping: rendered.segmentLookupIdMapping\r\n    }, {\r\n        transfer: [\r\n            rendered.pixelData.buffer,\r\n            rendered.segmentLookupData.buffer\r\n        ]\r\n    });\r\n});\r\n"],"names":[],"sourceRoot":""}